// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestSDKLibrary
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for RestSDKLibraryClient.
    /// </summary>
    public static partial class RestSDKLibraryClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateTask(this IRestSDKLibraryClient operations, TaskWriteRequestPayload body = default(TaskWriteRequestPayload))
            {
                return Task.Factory.StartNew(s => ((IRestSDKLibraryClient)s).CreateTaskAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTaskAsync(this IRestSDKLibraryClient operations, TaskWriteRequestPayload body = default(TaskWriteRequestPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTaskWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderByDate'>
            /// </param>
            /// <param name='taskStatus'>
            /// </param>
            public static object GetAllTasks(this IRestSDKLibraryClient operations, string orderByDate = default(string), string taskStatus = default(string))
            {
                return Task.Factory.StartNew(s => ((IRestSDKLibraryClient)s).GetAllTasksAsync(orderByDate, taskStatus), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderByDate'>
            /// </param>
            /// <param name='taskStatus'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllTasksAsync(this IRestSDKLibraryClient operations, string orderByDate = default(string), string taskStatus = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTasksWithHttpMessagesAsync(orderByDate, taskStatus, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse UpdateTask(this IRestSDKLibraryClient operations, int id, TaskWriteRequestPayload body = default(TaskWriteRequestPayload))
            {
                return Task.Factory.StartNew(s => ((IRestSDKLibraryClient)s).UpdateTaskAsync(id, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> UpdateTaskAsync(this IRestSDKLibraryClient operations, int id, TaskWriteRequestPayload body = default(TaskWriteRequestPayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTaskWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ErrorResponse DeleteTask(this IRestSDKLibraryClient operations, int id)
            {
                return Task.Factory.StartNew(s => ((IRestSDKLibraryClient)s).DeleteTaskAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteTaskAsync(this IRestSDKLibraryClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTaskWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetTask(this IRestSDKLibraryClient operations, int id)
            {
                return Task.Factory.StartNew(s => ((IRestSDKLibraryClient)s).GetTaskAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTaskAsync(this IRestSDKLibraryClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
